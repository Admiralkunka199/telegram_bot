import logging
from typing import Union, List, Dict
from aiogram import Bot
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, UserDeactivated
from config import ADMIN_IDS

async def send_admin_notification(bot: Bot, message: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        message: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, message)
        except (BotBlocked, ChatNotFound, UserDeactivated) as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

def format_price(price: Union[int, float]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        price: –¶–µ–Ω–∞ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    """
    return f"{float(price):,.2f}".replace(",", " ").replace(".00", "") + " ‚ÇΩ"

def format_cart_summary(cart_items: List[Dict]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        cart_items: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
    """
    if not cart_items:
        return "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    
    total_amount = sum(item['price'] * item['quantity'] for item in cart_items)
    items_count = sum(item['quantity'] for item in cart_items)
    
    result = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    
    for item in cart_items:
        result += f"‚Ä¢ {item['name']} - {item['quantity']} —à—Ç. x {format_price(item['price'])} = {format_price(item['price'] * item['quantity'])}\n"
    
    result += f"\n–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {items_count} —à—Ç."
    result += f"\n–ò—Ç–æ–≥–æ: {format_price(total_amount)}"
    
    return result

def format_order_summary(order: Dict, order_items: List[Dict]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        order: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        order_items: –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
    """
    status_text = {
        'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        'processing': '‚öôÔ∏è –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'shipped': 'üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'delivered': '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω—ë–Ω'
    }.get(order['status'], '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    
    delivery_method = {
        'delivery': 'üöö –î–æ—Å—Ç–∞–≤–∫–∞',
        'pickup': 'üè™ –°–∞–º–æ–≤—ã–≤–æ–∑'
    }.get(order['delivery_method'], 'üöö –î–æ—Å—Ç–∞–≤–∫–∞')
    
    result = f"üì¶ –ó–∞–∫–∞–∑ #{order['order_id']}\n"
    result += f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
    result += f"–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {delivery_method}\n"
    result += f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
    
    result += "–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n"
    for item in order_items:
        result += f"‚Ä¢ {item['name']} - {item['quantity']} —à—Ç. x {format_price(item['price'])} = {format_price(item['price'] * item['quantity'])}\n"
    
    result += f"\n–ò—Ç–æ–≥–æ: {format_price(order['total_amount'])}"
    
    return result